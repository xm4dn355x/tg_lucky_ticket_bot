# -*- coding: utf-8 -*-
########################################################################
#                                                                      #
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞                         #
#                                                                      #
# MIT License                                                          #
# Copyright (c) 2021 Michael Nikitenko                                 #
#                                                                      #
########################################################################


from datetime import datetime

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, ContentType


def get_day_period(request: datetime):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—ä–µ–∫—Ç datetime –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫"""
    periods = ['–î–æ–±—Ä–æ–π –Ω–æ—á–∏', '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!', '–î–æ–±—Ä—ã–π –¥–µ–Ω—å!', '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!']
    return periods[request.hour // 6]  # –°—É—Ç–∫–∏ –¥–µ–ª—è—Ç—Å—è –Ω–∞ 6 —Ä–∞–≤–Ω—ã—Ö —á–∞—Å—Ç–µ–π, –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ —Ä–∞–∑–±–∏–≤–∞—è—Å—å –Ω–∞ –ø–µ—Ä–∏–æ–¥—ã


def match_winner_number(number: int) -> list or bool:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–æ–º–µ—Ä –±–∏–ª–µ—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏"""
    if number == 10:  # TODO: –ó–∞–º–µ–Ω–∏—Ç—å –º–æ–∫–Ω—É—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ
        return ['–ö—Ä—É–∂–∫–∞', '–•—É–¥–∏', '–¢—Ä—É—Å—ã']
    elif number == 100:
        return ['–®—Ç–∞–Ω—ã']
    return False


def find_closest_place(location: ContentType.LOCATION):
    print(f"{location['latitude']}")    # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—É–Ω–∫—Ç–æ–≤ –≤—ã–¥–∞—á–∏ –∏ –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–µ–≥–æ
    print(f"{location['longitude']}")
    if location['latitude'] == 66.530255 and location['longitude'] == 66.625386:
        return '–¢–´ –¥–æ–º–∞'
    else:
        return '–¢—ã –Ω–µ –¥–æ–º–∞'


button_geo = KeyboardButton('üó∫ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ì–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π üåê', request_location=True)
button1 = KeyboardButton('1Ô∏è‚É£')
button2 = KeyboardButton('2Ô∏è‚É£')
button3 = KeyboardButton('3Ô∏è‚É£')
button4 = KeyboardButton('4Ô∏è‚É£')
button5 = KeyboardButton('5Ô∏è‚É£')
button6 = KeyboardButton('6Ô∏è‚É£')

greet_kb = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
greet_kb.add(button_geo).add(button1).row(button2, button3, button4).insert(button5).add(button6)
